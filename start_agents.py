#!/usr/bin/env python3\n\"\"\"\nAgent System Startup Script\n\nThis script initializes and starts the multi-agent system for the\nautomated blog platform.\n\"\"\"\n\nimport sys\nimport os\nimport logging\nimport argparse\nfrom datetime import datetime\n\n# Add the core directory to the Python path\nsys.path.append(os.path.join(os.path.dirname(__file__), 'core'))\n\ntry:\n    from core.agents.agent_manager import AgentManager, start_agent_system\nexcept ImportError as e:\n    print(f\"Error importing agent system: {e}\")\n    print(\"Make sure you have installed all required dependencies:\")\n    print(\"pip install -r requirements.txt\")\n    sys.exit(1)\n\ndef setup_logging(log_level='INFO', log_file=None):\n    \"\"\"Set up logging configuration\"\"\"\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    \n    # Configure root logger\n    logging.basicConfig(\n        level=getattr(logging, log_level.upper()),\n        format=log_format,\n        handlers=[\n            logging.StreamHandler(sys.stdout)\n        ]\n    )\n    \n    # Add file handler if specified\n    if log_file:\n        file_handler = logging.FileHandler(log_file)\n        file_handler.setFormatter(logging.Formatter(log_format))\n        logging.getLogger().addHandler(file_handler)\n    \n    # Reduce noise from some libraries\n    logging.getLogger('urllib3').setLevel(logging.WARNING)\n    logging.getLogger('requests').setLevel(logging.WARNING)\n\ndef check_redis_connection(redis_host='localhost', redis_port=6379):\n    \"\"\"Check if Redis is available\"\"\"\n    try:\n        import redis\n        client = redis.Redis(host=redis_host, port=redis_port, decode_responses=True)\n        client.ping()\n        print(f\"✓ Redis connection successful ({redis_host}:{redis_port})\")\n        return True\n    except Exception as e:\n        print(f\"✗ Redis connection failed: {e}\")\n        print(\"\\nPlease ensure Redis is installed and running:\")\n        print(\"  macOS: brew install redis && brew services start redis\")\n        print(\"  Ubuntu: sudo apt-get install redis-server\")\n        print(\"  Docker: docker run -d -p 6379:6379 redis:alpine\")\n        return False\n\ndef check_dependencies():\n    \"\"\"Check if all required dependencies are available\"\"\"\n    required_packages = [\n        'redis',\n        'requests',\n        'beautifulsoup4'\n    ]\n    \n    missing_packages = []\n    \n    for package in required_packages:\n        try:\n            __import__(package)\n            print(f\"✓ {package} is available\")\n        except ImportError:\n            missing_packages.append(package)\n            print(f\"✗ {package} is missing\")\n    \n    if missing_packages:\n        print(f\"\\nMissing packages: {', '.join(missing_packages)}\")\n        print(\"Install them with: pip install -r requirements.txt\")\n        return False\n    \n    return True\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description='Start the Automated Blog Platform Agent System'\n    )\n    parser.add_argument(\n        '--redis-host',\n        default='localhost',\n        help='Redis host (default: localhost)'\n    )\n    parser.add_argument(\n        '--redis-port',\n        type=int,\n        default=6379,\n        help='Redis port (default: 6379)'\n    )\n    parser.add_argument(\n        '--log-level',\n        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],\n        default='INFO',\n        help='Log level (default: INFO)'\n    )\n    parser.add_argument(\n        '--log-file',\n        help='Log file path (optional)'\n    )\n    parser.add_argument(\n        '--check-only',\n        action='store_true',\n        help='Only check dependencies and connections, do not start agents'\n    )\n    \n    args = parser.parse_args()\n    \n    # Set up logging\n    setup_logging(args.log_level, args.log_file)\n    \n    print(\"=\"*60)\n    print(\"Automated Blog Platform - Agent System\")\n    print(f\"Starting at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    print(\"=\"*60)\n    \n    # Check dependencies\n    print(\"\\n1. Checking dependencies...\")\n    if not check_dependencies():\n        sys.exit(1)\n    \n    # Check Redis connection\n    print(\"\\n2. Checking Redis connection...\")\n    if not check_redis_connection(args.redis_host, args.redis_port):\n        sys.exit(1)\n    \n    if args.check_only:\n        print(\"\\n✓ All checks passed! System is ready to start.\")\n        return\n    \n    # Start the agent system\n    print(\"\\n3. Starting agent system...\")\n    print(\"Press Ctrl+C to stop the system gracefully.\\n\")\n    \n    try:\n        start_agent_system(args.redis_host, args.redis_port)\n    except KeyboardInterrupt:\n        print(\"\\n\\nShutdown requested by user.\")\n    except Exception as e:\n        print(f\"\\nError starting agent system: {e}\")\n        logging.exception(\"Agent system startup failed\")\n        sys.exit(1)\n    \n    print(\"Agent system shutdown complete.\")\n\nif __name__ == '__main__':\n    main()"